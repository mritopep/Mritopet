@app.route("/next", methods=['GET', 'POST'])
def next():
    global model

    if "next" not in session:
        session['next'] = True

    if(not session['next']):
        
    
    start_time = time.time()

    print(bcolors.OKBLUE + "Starting" + bcolors.ENDC)

    input_folder = path.join(app_root, 'input', 'nii')
    file_path = input_folder + '/' + listdir(input_folder)[0]

    print(f"File path : {file_path}")

    session['skull_strip'] = True
    session['denoise'] = True
    session['bias_field_correction'] = True

    end_time = time.time()
    print(bcolors.OKCYAN +
          f"Time Taken : {(end_time-start_time)/60} min"+bcolors.ENDC)

    def process(model,file_path, Skull_Strip=False, Denoise=True, Bais_Correction=False):
        print("inside generator")

        skull_strip_end = False
        denoise_end = False
        bias_field_correction_end = False
        process_start = False
        process_end = False
        generate_start = False
        generate_end = False
        saving_start = False
        saving_end = False
        start = False
        end = False

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        process_start = True

        print("\n-------------------MRI PREPROCESS STARTED--------------------\n")

        if(Denoise):
            if(intensity_normalization(file_path, f"{DENOISE}/mri")):
                denoise_end = True
                input = f"{DENOISE}/mri.nii"
                print("denoise completed")
            else:
                denoise_end = False

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        if(Skull_Strip):
            if(skull_strip(input)):
                skull_strip_end = True
                input = f"{SKULL_STRIP}/mri_sk.nii"
                print("skull strip completed")
            else:
                skull_strip_end = False

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        if(Bais_Correction):
            if(bias_correction(input, f"{BAIS_COR}/mri.nii")):
                bias_field_correction_end = True
                input = f"{BAIS_COR}/mri.nii"
                print("bias_field_correction completed")
            else:
                bias_field_correction_end = False

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        shutil.copyfile(input, f"{TEMP_OUTPUT}/mri.nii")

        print("\nTemp mri image: " + f"{TEMP_OUTPUT}/mri.nii")
        print("\n-------------------MRI PREPROCESS COMPELETED--------------------\n")

        
        model.process()

        print("process completed")

        process_end = True

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        generate_start = True

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        model.generate()

        print("generate completed")

        generate_end = True

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        saving_start = True

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        model.save()

        print("saving completed")

        saving_end = True

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

        print(bcolors.OKGREEN + 'Pet saved' + bcolors.ENDC)

        start = False
        end = True

        yield [skull_strip_end, denoise_end, bias_field_correction_end, process_start, process_end, generate_start, generate_end, saving_start, saving_end]

    return Response(stream_template('sample.html', data=process(model,file_path, Skull_Strip=True, Denoise=True, Bais_Correction=True)))